{"version":3,"sources":["card/Card.js","cards/Cards.js","dom/Dom.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","onClick","onCardClick","back","Cards","ids","isSort","sort","map","card","index","key","Dom","element","this","$selector","Error","classList","add","remove","contains","textContent","cardClick","firstCard","secondCard","e","target","classContains","text","setTimeout","addClass","removeClass","cardEquals","App","amountCards","numberCards","i","push","Math","floor","random","generateIds","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yNAGaA,G,YAAO,SAACC,GACjB,OACI,yBAAKC,UAAU,OAAOC,QAASF,EAAMG,aACjC,yBAAKF,UAAU,UAGf,yBAAKA,UAAU,QACVD,EAAMI,SCPVC,EAAQ,SAACL,GAAW,IACtBM,EAA4BN,EAA5BM,IAAKC,EAAuBP,EAAvBO,OAAQJ,EAAeH,EAAfG,YAIpB,OAHGI,GACCD,EAAIE,OAGJ,oCACKF,EAAIG,KAAI,SAACC,EAAMC,GAAP,OAAiB,kBAAC,EAAD,CAAMP,KAAMM,EAAME,IAAG,eAAUD,GAASR,YAAaA,S,cCVrFU,E,WACF,WAAYC,GAAU,oBAClBC,KAAKC,UAAwB,WAAZF,EACb,IAAIG,MAAM,yBAA2BH,E,qDAGpCb,GACLc,KAAKC,UAAUE,UAAUC,IAAIlB,K,kCAGrBA,GACRc,KAAKC,UAAUE,UAAUE,OAAOnB,K,oCAGtBA,GACVc,KAAKC,UAAUE,UAAUG,SAASpB,K,2BAIlC,OAAOc,KAAKC,UAAUM,gB,KCb9B,SAASC,IACP,IAAIC,EAAY,KACZC,EAAa,KAEjB,OAAO,SAASC,GACZ,IDYYZ,ECZNa,GDYMb,ECZKY,EAAEC,ODad,IAAId,EAAIC,ICZVa,EAAOC,cAAc,YAIpBJ,EAGKC,IAUf,SAAoBD,EAAWC,GAC7B,IAAID,IAAcC,EACd,OAGDD,EAAUK,OAASJ,EAAWI,KAC7BC,YAAW,WACTN,EAAUO,SAAS,QACnBN,EAAWM,SAAS,UACnB,KAEHD,YAAW,WACTN,EAAUQ,YAAY,UACtBP,EAAWO,YAAY,YACtB,KAtBCC,CAAWT,EADXC,EAAaE,GAEbF,EAAaD,EAAY,MALzBA,EAAYG,EAOhBA,EAAOI,SAAS,YA2CPG,MAXf,WACE,IAAM5B,EATR,SAAqB6B,GAEnB,IADA,IAAIC,EAAc,GACVC,EAAI,EAAGA,EAAIF,EAAaE,IAC9BD,EAAYE,KAAKC,KAAKC,MAAsB,IAAhBD,KAAKE,WAEnC,OAAOL,EAIKM,CAAY,IAClBvC,EAAcoB,IACpB,OACE,yBAAKtB,UAAU,WACb,kBAAC,EAAD,CAAOK,IAAKA,EAAKH,YAAaA,IAC9B,kBAAC,EAAD,CAAOG,IAAKA,EAAKH,YAAaA,EAAaI,QAAQ,MClDrCoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.451a66cd.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\n\r\nexport const Card = (props) => {\r\n    return (\r\n        <div className=\"card\" onClick={props.onCardClick}>\r\n            <div className=\"front\">\r\n                {/* <img src=\"../../scn.png\" alt=\"\"/> */}\r\n            </div>\r\n            <div className=\"back\">\r\n                {props.back}\r\n            </div>\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport {Card} from '../card/Card';\r\n\r\nexport const Cards = (props) => {\r\n    const {ids, isSort, onCardClick} = props;\r\n    if(isSort) {\r\n        ids.sort();\r\n    }\r\n    return (\r\n        <>\r\n            {ids.map((card, index) => <Card back={card} key={`card ${index}`} onCardClick={onCardClick} />)}\r\n        </>\r\n    );\r\n}","class Dom {\r\n    constructor(element) {\r\n        this.$selector = element === 'string' ?\r\n            new Error('Dom node did not find') : element;\r\n    }\r\n\r\n    addClass(className) {\r\n        this.$selector.classList.add(className);\r\n    }\r\n    \r\n    removeClass(className) {\r\n        this.$selector.classList.remove(className);\r\n    }\r\n\r\n    classContains(className) {\r\n        this.$selector.classList.contains(className);\r\n    }\r\n\r\n    get text() {\r\n        return this.$selector.textContent;\r\n    }\r\n}\r\n\r\nexport function $(element) {\r\n    return new Dom(element);\r\n}","import React from 'react';\nimport './App.css';\nimport {Cards} from './cards/Cards';\nimport {$} from './dom/Dom';\n\n// function to define two cards\nfunction cardClick() {\n  let firstCard = null;\n  let secondCard = null;\n  \n  return function(e) {\n      const target = $(e.target);\n      if(target.classContains('opened')) {\n          return;\n      }\n  \n      if(!firstCard) {\n          firstCard = target;\n      }\n      else if(!secondCard) {\n          secondCard = target;\n          cardEquals(firstCard, secondCard);\n          secondCard = firstCard = null;\n      }\n      target.addClass('opened');\n  }\n}\n\n// comparison of two cards\nfunction cardEquals(firstCard, secondCard) {\n  if(!firstCard || !secondCard) {\n      return;\n  }\n  debugger\n  if(firstCard.text === secondCard.text) {\n      setTimeout(() => {\n        firstCard.addClass('hide');\n        secondCard.addClass('hide');\n      }, 1000);\n  } else {\n      setTimeout(() => {\n        firstCard.removeClass('opened');\n        secondCard.removeClass('opened');\n      }, 1000);\n  }\n}\n\n// generation of numbers for cards\nfunction generateIds(amountCards) {\n  let numberCards = [];\n  for(let i = 0; i < amountCards; i++) {\n    numberCards.push(Math.floor(Math.random() * 100));\n  }\n  return numberCards;\n}\n\nfunction App() {\n  const ids = generateIds(15);\n  const onCardClick = cardClick();\n  return (\n    <div className=\"wrapper\">\n      <Cards ids={ids} onCardClick={onCardClick} />\n      <Cards ids={ids} onCardClick={onCardClick} isSort={true} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}